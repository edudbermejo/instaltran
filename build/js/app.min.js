(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

require('../features/credentials/login');

require('../features/inside');

require('../features/credentials/register');

angular.module('entry', ['credentials.login', 'credentials.register', 'inside']);

},{"../features/credentials/login":4,"../features/credentials/register":7,"../features/inside":11}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($stateProvider, $urlRouterProvider) {
    'ngInject';

    $urlRouterProvider.otherwise('/login');

    $stateProvider.state('login', {
        url: '/login',
        templateUrl: 'src/features/credentials/login/template.html',
        controller: 'LoginController as lc'
    });
};

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($usersManager, $state, $externalCalls) {
    'ngInject';

    var lc = this;

    lc.tryLogin = function () {

        if (!lc.user) {
            Materialize.toast('No se ha introducido usuario', 2000);
        } else {
            if (!lc.pass) {
                Materialize.toast('El campo contraseña es obligatorio', 2000);
            } else {

                $externalCalls.getUserByUsername(lc.user).then(logAndJump).catch(function () {
                    Materialize.toast('El usuario introducido no existe', 2000);
                });
            }
        }

        function logAndJump(user) {
            if (lc.pass === user.password) {
                $usersManager.setLoggedUser(user);
                $state.go('inside.timeline');
            } else {
                Materialize.toast('La contraseña no es correcta', 2000);
            }
        }
    };

    lc.goRegister = function () {
        $state.go('register');
    };
};

},{}],4:[function(require,module,exports){
'use strict';

require('../../transversal/usersManager');

require('../../transversal/externalCalls');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('credentials.login', ['ui.router', 'transversal.usersManager', 'transversal.externalCalls']).config(_config2.default).controller('LoginController', _controller2.default);

},{"../../transversal/externalCalls":18,"../../transversal/usersManager":20,"./config":2,"./controller":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($stateProvider) {
    'ngInject';

    $stateProvider.state('register', {
        url: '/register',
        templateUrl: 'src/features/credentials/register/template.html',
        controller: 'RegisterController as rc'
    });
};

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($state, $externalCalls) {
    'ngInject';

    var rc = this;

    rc.tryRegister = function () {

        if (!rc.user) {
            Materialize.toast('No se ha introducido usuario', 2000);
        } else {
            if (!rc.pass) {
                Materialize.toast('El campo contraseña es obligatorio', 2000);
            } else {

                if (!rc.passre) {
                    Materialize.toast('Repita la contraseña', 2000);
                } else {

                    if (rc.pass !== rc.passre) {

                        Materialize.toast('Las contraseñas no coinciden', 2000);
                    } else {

                        var _username = rc.user.toLowerCase();
                        console.log(_username);
                        $externalCalls.getUserByUsername(_username).then(keepTryingRegister);
                    }
                }
            }
        }

        function keepTryingRegister(user) {
            if (user) {
                Materialize.toast('Ya existe ese nombre de usuario', 2000);
            } else {
                $externalCalls.postUser(_username, rc.pass).then(finishing);
            };

            function finishing() {
                Materialize.toast('Usuario creado correctamente', 1500, '', function () {
                    $state.go('login');
                });
            }
        }
    };
};

},{}],7:[function(require,module,exports){
'use strict';

require('../../transversal/usersManager');

require('../../transversal/externalCalls');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('credentials.register', ['ui.router', 'transversal.externalCalls']).config(_config2.default).controller('RegisterController', _controller2.default);

},{"../../transversal/externalCalls":18,"../../transversal/usersManager":20,"./config":5,"./controller":6}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    return {
        bindings: {
            photo: '<'
        },
        controller: function controller() {},
        templateUrl: 'src/features/inside/components/photoInList/template.html'
    };
};

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($stateProvider) {
    'ngInject';

    $stateProvider.state('inside', {
        url: '/inside',
        abstract: true,
        templateUrl: 'src/features/inside/template.html',
        controller: 'InsideController as ic'
    });
};

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($state, $usersManager) {
    'ngInject';

    var ic = this;
    var _darkBackground = "col s6 center-align green darken-3";
    var _lightBackground = "col s6 center-align light-green accent-1";
    var _darkIcon = "material-icons medium light-green-text text-darken-4";
    var _lightIcon = "material-icons medium light-green-text text-lighten-4";

    ic.classTimelineBackground = _darkBackground;
    ic.classTimelineIcon = _lightIcon;
    ic.classSharePhotoBackground = _lightBackground;
    ic.classSharePhotoIcon = _darkIcon;

    ic.goTimeline = function () {
        ic.classTimelineBackground = _darkBackground;
        ic.classTimelineIcon = _lightIcon;
        ic.classSharePhotoBackground = _lightBackground;
        ic.classSharePhotoIcon = _darkIcon;
        $state.go('^.timeline');
    };

    ic.goSharePhoto = function () {
        ic.classTimelineBackground = _lightBackground;
        ic.classTimelineIcon = _darkIcon;
        ic.classSharePhotoBackground = _darkBackground;
        ic.classSharePhotoIcon = _lightIcon;
        $state.go('^.sharephoto');
    };

    ic.loggout = function () {
        $usersManager.loggout();
        $state.go('login');
    };
};

},{}],11:[function(require,module,exports){
'use strict';

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

require('./timeline');

require('./share-photo');

require('../transversal/usersManager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('inside', ['ui.router', 'inside.timeline', 'inside.sharePhoto', 'transversal.usersManager']).config(_config2.default).controller('InsideController', _controller2.default);

},{"../transversal/usersManager":20,"./config":9,"./controller":10,"./share-photo":14,"./timeline":17}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($stateProvider) {
    'ngInject';

    $stateProvider.state('inside.sharephoto', {
        url: '/sharephoto',
        templateUrl: '/src/features/inside/share-photo/template.html',
        controller: 'SharePhotoController as spc'
    });
};

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($externalCalls, $state) {
    'ngInject';

    var spc = this;

    spc.upPhoto = function () {

        if (!spc.imgUrl) {
            Materialize.toast('No se ha introducido una ruta', 2000);
        } else {
            $externalCalls.postPhoto(spc.imgUrl, spc.title).then(function () {
                $state.go('inside.timeline');
            }).catch(function () {
                Materialize.toast('Ocurrio un problema. Intentalo mas tarde', 2000);
            });
        }
    };
};

},{}],14:[function(require,module,exports){
'use strict';

require('../../transversal/externalCalls');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('inside.sharePhoto', ['transversal.externalCalls']).config(_config2.default).controller('SharePhotoController', _controller2.default);

},{"../../transversal/externalCalls":18,"./config":12,"./controller":13}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($stateProvider) {
    'ngInject';

    $stateProvider.state('inside.timeline', {
        url: '/timeline',
        templateUrl: '/src/features/inside/timeline/template.html',
        controller: 'TimelineController as tc'
    });
};

},{}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($externalCalls) {
    'ngInject';

    var tc = this;

    var _page = 1;

    /*tc.photos = [{
        user_id : 'Gastly',
        image : 'img/prueba.png',
        likes : 123,
        title : 'Buh!'
    }, {
        user_id : 'Haunter',
        image : 'img/haunter.png',
        likes : 321,
        title : 'Buh++!'
    }];*/

    $externalCalls.getPhotosTimeline(_page).then(function (response) {
        console.log(response);
        tc.photos = response;
    });

    tc.morePhotos = function () {
        _page++, tc.photos.push($externalCalls.getPhotos(_page));
    };
};

},{}],17:[function(require,module,exports){
'use strict';

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _controller = require('./controller');

var _controller2 = _interopRequireDefault(_controller);

var _photoInList = require('../components/photoInList');

var _photoInList2 = _interopRequireDefault(_photoInList);

require('../../transversal/externalCalls');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('inside.timeline', ['ui.router', 'transversal.externalCalls']).config(_config2.default).controller('TimelineController', _controller2.default).component('instTimePhoto', (0, _photoInList2.default)());

},{"../../transversal/externalCalls":18,"../components/photoInList":8,"./config":15,"./controller":16}],18:[function(require,module,exports){
'use strict';

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

require('../usersManager');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('transversal.externalCalls', ['transversal.usersManager']).service('$externalCalls', _service2.default);

},{"../usersManager":20,"./service":19}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function ($usersManager, $http, $q) {
    'ngInject';

    var _url = 'http://localhost:2222';

    // Recupera fotos con paginacion. Se pasan los followed para hacer join.
    this.getPhotosTimeline = function (page) {
        var _qu = $q.defer();

        var _user = $usersManager.getLoggedUser();

        $http({
            url: _url + '/photos',
            method: 'GET',
            params: { page: page,
                userid: _user._id }
        }).then(backPhotosOK).catch(backPhotosWrong);

        function backPhotosOK(response) {
            if (response.data) {
                _qu.resolve(response.data.docs);
            } else {
                _qu.reject('Nothing found');
            }
        };

        function backPhotosWrong(error) {
            _qu.reject('Error');
        }

        return _qu.promise;
    };

    // Recupera un usuario haciendo uso de su id (en tabla de mongo)
    this.getUserById = function (id) {

        var _qu = $q.defer();

        return $http({
            url: _url + '/users/' + id,
            method: 'GET'
        }).then(backUserOK).catch(backUserWrong);

        function backUserOK(response) {
            if (response.data) {
                _qu.resolve(response.data);
            } else {
                _qu.reject('Nothing found');
            }
        };

        function backUserWrong(error) {
            _qu.reject('Error');
        }

        return _qu.promise;
    };

    // Recupera un usuario haciendo uso de su username
    this.getUserByUsername = function (username) {

        var _qu = $q.defer();

        $http({
            url: _url + '/users',
            params: {
                username: username,
                strict: "s"
            },
            method: 'GET'
        }).then(backUserOK).catch(backUserWrong);

        function backUserOK(response) {
            if (response.data) {
                _qu.resolve(response.data);
            } else {
                _qu.resolve(null);
            }
        };

        function backUserWrong(error) {
            _qu.reject('Error');
        }

        return _qu.promise;
    };

    this.postPhoto = function (url, title) {

        var _qu = $q.defer();

        var _user = $usersManager.getLoggedUser();

        $http({
            url: _url + '/photos',
            data: {
                image: url,
                user: _user.username,
                user_id: _user._id,
                title: title
            },
            method: 'POST'
        }).then(upPhotoOK).catch(upPhotoWrong);

        function upPhotoOK(response) {
            _qu.resolve(response.data);
        };

        function upPhotoWrong(error) {
            _qu.reject('Error');
        }

        return _qu.promise;
    };

    this.postUser = function (username, password) {

        var _qu = $q.defer();

        $http({
            url: _url + '/users',
            data: {
                username: username,
                password: password
            },
            method: 'POST'
        }).then(upUserOK).catch(upUserWrong);

        function upUserOK(response) {
            _qu.resolve(response.data);
        };

        function upUserWrong(error) {
            _qu.reject('Error');
        }

        return _qu.promise;
    };
};

},{}],20:[function(require,module,exports){
'use strict';

var _service = require('./service');

var _service2 = _interopRequireDefault(_service);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

angular.module('transversal.usersManager', []).service('$usersManager', _service2.default);

},{"./service":21}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function () {
    'ngInject';

    var _logged;

    this.setLoggedUser = function (user) {
        _logged = angular.copy(user);
    };

    this.getLoggedUser = function () {
        return _logged;
    };

    this.loggout = function () {
        _logged = null;
    };
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
